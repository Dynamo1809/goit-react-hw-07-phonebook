{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-operations.js","redux/store.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Contacts/Contacts.jsx","App.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","items","createReducer","state","payload","filter","id","_","loading","combineReducers","getAllContacts","contacts","getLoading","getFilter","getVisibleContacts","createSelector","normalizedFilterName","toLowerCase","trim","name","includes","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ContactForm","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","e","currentTarget","value","reset","className","onSubmit","preventDefault","some","contact","alert","post","then","data","catch","error","addContact","type","onChange","pattern","title","required","Filter","contactsActions","target","Contact","onClick","delete","deleteContact","ContactList","map","Contacts","useEffect","a","get","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e578d56f.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { v4 as uuidv4 } from 'uuid'; \r\n\r\n// const addContact = createAction('contacts/add', (newName, number) => ({\r\n//   payload: {\r\n  //     id: uuidv4(),\r\n  //     name: newName, \r\n//     number,\r\n//   }\r\n// }))\r\n\r\n// import contactTypes from './contact-types';\r\n\r\n// const addContact = ( newName, number) => ({\r\n  //   type: contactTypes.ADD,\r\n  //   payload: {\r\n    // id: uuidv4(),\r\n    // name: newName, \r\n    // number,\r\n    //   }\r\n    // });\r\n    \r\n    // const deleteContact = (contactId) => ({\r\n      //   type: contactTypes.DELETE,\r\n      //   payload: contactId,\r\n      // });\r\n\r\n      // const changeFilter = (value) => ({\r\n        //   type: contactTypes.CHANGE_FILTER,\r\n        //   payload: value,\r\n        // })\r\n        ","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { fetchContactsRequest, fetchContactsSuccess, fetchContactsError, addContactRequest, addContactSuccess, addContactError, deleteContactRequest, deleteContactSuccess, deleteContactError, changeFilter } from './contacts-actions';\r\naxios.defaults.baseURL = 'https://614647788f2f4e001730401d.mockapi.io/api/v1';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (state, {payload}) => payload,\r\n  [addContactSuccess]: (state, {payload}) => [payload, ...state],\r\n  [deleteContactSuccess]: (state, {payload}) => state.filter( ({id}) => id !==  payload),\r\n});\r\n\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, {payload}) => payload,\r\n});\r\n\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n})\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const items = (state = initialState, { type, payload }) => {\r\n//   switch( type ) {\r\n//     case types.ADD:\r\n//       return initialState.name === payload.name ? alert(`${payload.name} is already in contacts`) : [payload, ...state]\r\n\r\n//     case types.DELETE:\r\n//       return state.filter( ({id}) => id !==  payload)\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n  \r\n// };\r\n\r\n// const filter = (state = '', {type, payload}) => {\r\n  //   switch( type ) {\r\n    //     case types.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getAllContacts = state => state.contacts.items;\r\n\r\nexport const getLoading = state => state.contacts.loading;\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getAllContacts,getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilterName = filter.toLowerCase().trim();\r\n    return contacts.filter( ({ name }) => name.toLowerCase().includes(normalizedFilterName));\r\n  },\r\n);\r\n  \r\n\r\n\r\n\r\n\r\n  // export const getVisibleContacts = state => {\r\n  //   const filter = getFilter(state);\r\n  //   const contacts = getAllContacts(state);\r\n  //   const normalizedFilterName = filter.toLowerCase().trim();\r\n  //   return contacts.filter( ({ name }) => name.toLowerCase().includes(normalizedFilterName));\r\n  // };\r\n\r\n// const getVisibleContacts = (allContacts, filter) => {\r\n//   const normalizedFilterName = filter.toLowerCase().trim();\r\n//   return allContacts.filter( ({ name }) => name.toLowerCase().includes(normalizedFilterName));\r\n// };","import axios from 'axios';\r\nimport { addContactRequest, addContactSuccess, addContactError, deleteContactRequest, deleteContactSuccess, deleteContactError, fetchContactsRequest, fetchContactsSuccess, fetchContactsError } from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'https://614647788f2f4e001730401d.mockapi.io/api/v1';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts')\r\n\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nexport const addContact = (name, number) => dispatch => {\r\n  const contact = {\r\n    name, \r\n    number,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({data}) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)))\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)))\r\n};","import { configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\r\nimport {  FLUSH, REHYDRATE, PAUSE,PERSIST,PURGE,REGISTER, } from 'redux-persist'; // persistStore, persistReducer,\r\nimport logger from 'redux-logger';\r\nimport {contactsReducer} from './contacts';\r\n// import storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    // contacts: persistReducer(contactsPersistConfig, contactReducer)\r\n    contacts: contactsReducer\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n\r\n\r\n\r\n// const contactsPersistConfig = {\r\n  //   key: 'contacts',\r\n  //   storage,\r\n  //   blacklist: ['filter'],\r\n  // };\r\n  \r\n  // const persistor = persistStore(store);\r\n  \r\n  // const exportedObject = {store, persistor};\r\n\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactReducer,\r\n// });\r\n\r\n// const persistedReducer = persistReducer(contactsPersistConfig, rootReducer);\r\n\r\n// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n// const rootReducer = combineReducers({\r\n  //   contacts: contactReducer,\r\n// });\r\n\r\n\r\n","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAllContacts, addContact } from 'redux/contacts';\r\n// import { addContact } from 'redux/contacts/contacts-operations';\r\nimport './ContactForm.scss';\r\n\r\nfunction ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getAllContacts);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch(name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break; \r\n\r\n      default:\r\n        return;\r\n    };\r\n  };\r\n\r\n  const formSubmit = (e) => {\r\n    e.preventDefault();\r\n    const duplicateName = contacts.some(contact => contact.name === name);\r\n\r\n    if(duplicateName) {\r\n      alert(`${name} is already in contacts`);\r\n      reset();\r\n      return;\r\n    };\r\n    \r\n    dispatch(addContact(name, number));\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className=\"Phonebook-form\" onSubmit={formSubmit}>         \r\n      <label className=\"Phonebook__label\">\r\n        Name:<br></br><input\r\n          className=\"Phonebook__input\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Ім'я може складатись тільки з букв, апострофа, тире і пробілів. Наприклад Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan і т. п.\"\r\n          required\r\n        />\r\n      </label> \r\n      <label className=\"Phonebook__label\">\r\n        Number:<br></br><input\r\n          className=\"Phonebook__input\"\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={handleChange}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Телефон повинен складатись з цифр і може містити пробіли, тире, круглі скобки і може починатися з + .\"\r\n          required\r\n        />\r\n      </label>\r\n      <button className=\"Phonebook__button\" type=\"submit\" >Add contact</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   contacts: state.contacts.items,\r\n// })\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   addContact: (newName, number) => dispatch(addContact(newName, number))\r\n// });","import { useDispatch, useSelector } from 'react-redux'\r\nimport { contactsActions, getFilter } from 'redux/contacts';\r\nimport PropTypes from 'prop-types';\r\nimport './Filter.scss';\r\n\r\nconst Filter = () => {\r\n  const dispatch = useDispatch();\r\n  const filter = useSelector(getFilter);\r\n\r\n  return (\r\n    <label className=\"Filter__label\">\r\n      Find contacts by name:<br></br><input\r\n        className=\"Filter__input\"\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={(e) => dispatch(contactsActions.changeFilter(e.target.value))}\r\n      />\r\n    </label> \r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  dispatch: PropTypes.func,\r\n}\r\n\r\n// const mapStateToProps = ({contacts:{ filter }}) => ({\r\n//   filter,\r\n// })\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: (e) => dispatch(contactsActions.changeFilter(e.target.value))\r\n// }) ","import './Contact.scss';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteContact, getLoading } from 'redux/contacts';\r\n\r\nconst Contact = ({ name, number, id }) => {\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(getLoading);\r\n\r\n  return (\r\n    <li className=\"Contacts__item\">\r\n      <p className=\"Contacts__text\">{name} : {number}</p>\r\n      <button onClick={() => dispatch(deleteContact(id))} className=\"Contacts__button\">Delete</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n\r\nContact.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};\r\n\r\n// {isLoading ? 'Deleting...' : 'Delete'}","import Contact from 'components/Contact';\r\n\r\nconst ContactList = ({contacts}) => (\r\n  <ul className=\"Contacts-list\">\r\n    {contacts.map( contact => (\r\n      <Contact key={contact.id} {...contact} />\r\n    ))}  \r\n  </ul>\r\n);\r\n\r\nexport default ContactList;","import { useEffect } from 'react';\r\nimport ContactList from 'components/ContactList';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchContacts, getVisibleContacts } from 'redux/contacts';\r\nimport PropTypes from 'prop-types';\r\nimport './Contacts.scss';\r\n\r\nconst Contacts = () => {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getVisibleContacts);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <>\r\n      <ContactList contacts={contacts}/>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Contacts;\r\n\r\nContacts.propTypes = {\r\n  dispatch: PropTypes.func,\r\n};\r\n\r\n// const getVisibleContacts = (allContacts, filter) => {\r\n//   const normalizedFilterName = filter.toLowerCase().trim();\r\n//   return allContacts.filter( ({ name }) => name.toLowerCase().includes(normalizedFilterName));\r\n// };\r\n\r\n// const mapStateToProps = ({contacts: {items, filter}}) => ({\r\n//   contacts: getVisibleContacts(items, filter)\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   // onDelete: (id) => dispatch(deleteContact(id)),\r\n//   fetchContacts: () => dispatch(fetchContacts()),\r\n// });","// Components //\nimport ContactForm  from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport Contacts from 'components/Contacts';\nimport PropTypes from 'prop-types';\n\nexport function App() {\n  // useEffect(() =>{\n    //  window.localStorage.setItem('contacts', JSON.stringify(contacts))\n    // },[contacts])\n\n    return (      \n      <div className=\"App\">\n        <h1 className=\"Phonebook-title\">Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <Contacts />\n      </div>\n    )\n};\n\nApp.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape()),\n  filter: PropTypes.string,\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport store from 'redux/store';\nimport { App } from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}